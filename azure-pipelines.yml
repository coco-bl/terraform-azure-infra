trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureServiceConnection: 'website01'
  backendResourceGroup: 'tf-state-devrg01'
  backendStorageAccount: 'cotfbackenddev01'
  backendContainer: 'tfstate01'
  backendKey: 'appsdev.terraform.tfstate'

stages:
- stage: Terraform_CI_CD
  displayName: 'Terraform CI/CD'
  jobs:
  - job: Terraform
    displayName: 'Terraform Workflow'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
      displayName: 'Use Python 3.x'

    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'
      displayName: 'Install Terraform'

    - task: TerraformTaskV4@0
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: $(azureServiceConnection)
        backendAzureRmResourceGroupName: $(backendResourceGroup)
        backendAzureRmStorageAccountName: $(backendStorageAccount)
        backendAzureRmContainerName: $(backendContainer)
        backendAzureRmKey: $(backendKey)
        workingDirectory: 'terraform-azure-infra/app_service'

    - task: TerraformTaskV4@0
      displayName: 'Terraform Validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: 'terraform-azure-infra/app_service'

    - task: TerraformTaskV4@0
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: 'terraform-azure-infra/app_service'

    - task: TerraformTaskV4@0
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        environmentServiceNameAzureRM: $(azureServiceConnection)
        workingDirectory: 'terraform-azure-infra/app_service'
        vars: |
          environment = "dev"
